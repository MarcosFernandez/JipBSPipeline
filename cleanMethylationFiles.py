#!/usr/bin/env python

import os
import re
import sys
import argparse
import fnmatch
import glob


class Basics(object):

    def finder(self,pathSearch, extension):
        """ Find all files recursevely according to a given extension """
        ret = []
        for dirpath, dirnames, files in os.walk(pathSearch):
            for f in fnmatch.filter(files, extension):
                ret.append("%s/%s"%(dirpath,f))
        return ret  

    def reportFiles(self,listFiles,concept):
        """ Reporting a list of file to be removed """
        print concept
        for fileToRm in listFiles:
            print fileToRm.replace("//",'/') 


class Check(Basics):
    title = "Check Methylation Files"
    description = """ Checks available files in a given Methylation folder."""
                
    def register(self, parser):
        ## required parameters
        parser.add_argument('-d', '--directory-methylation',metavar="PATH",dest="directory_methylation", 
                            help="""Directory were are stored the files generated by the methylation pipeline.""",default=None)
        
    def run(self,args):
        #1. Lane Mapping
        laneMappings = self.finder('%s/bs_mapping/' %args.directory_methylation, '*bam') 
        #2. Sample Mappings
        sampleMappings = self.finder('%s/bs_mapping_merged/' %args.directory_methylation, '*.bam')
        #3. Chromosome calls
        chrCalls = self.finder('%s/meth_calls_sample_chr/' %args.directory_methylation, '*.bcf')
        #4. Sample calls
        sampleCalls = self.finder('%s/meth_calls_sample/' %args.directory_methylation, '*.bcf')
        #5. Filter calls
        filterCalls =  self.finder('%s/meth_filtering/' %args.directory_methylation, '*_cpg.txt.gz') 
       
        self.reportFiles(laneMappings,"--------- Lane Alignment Files ---------")
            
        print ""
        self.reportFiles(sampleMappings,"-------- Sample Alignment Files --------")
        
        print ""
        self.reportFiles(chrCalls,"-- Bisulfite Chromosome Variant Calls --")
        
        print ""
        self.reportFiles(sampleCalls,"---- Bisulfite Sample Variant Calls ----")
        
        print ""
        self.reportFiles(filterCalls,"-------- Filtered Sample Calls ---------")         


class Remove(Basics):
    title = "Remove Methylation Files"
    description = """ Remove methylation files in a given Methylation folder."""
                
    def register(self, parser):
        ## required parameters
        parser.add_argument('-d', '--directory-methylation',metavar="PATH", dest="directory_methylation", 
                            help="""Directory were are stored the files generated by the methylation pipeline.""",default=None)

        parser.add_argument('-a', '--all-mappings', dest="all_mappings", action="store_true", default=False, help="Remove all BAM files.")
        parser.add_argument('-l', '--lane-mappings', dest="lane_mappings", action="store_true", default=False, help="Remove lane BAM files.")
        parser.add_argument('-s', '--sample-mappings', dest="sample_mappings", action="store_true", default=False, help="Remove sample BAM files.")
        parser.add_argument('-c', '--chr-calls', dest="chr_calls", action="store_true", default=False, help="Remove Chromosome calls.")
        parser.add_argument('-m', '--sample-calls', dest="sample_calls", action="store_true", default=False, help="Remove Sample calls.")
        parser.add_argument('-f', '--filter-calls', dest="filter_calls", action="store_true", default=False, help="Remove Filtered calls.")
        parser.add_argument('-D', '--delete-all', dest="delete_all", action="store_true", default=False, help="Deleted all methylation pipeline files.")

    def removeFiles(self,listFiles):
        """Remove Files from a list of files"""
        print ""
        if len(listFiles) == 0:
            print "No Files to be removed."
        else:
            input_user = raw_input("Are you sure you want to delete these files (Y/N): ")
            if input_user == "Y":
                for fileRm in listFiles:
                    try:
                        os.remove(fileRm)
                    except OSError as e:
                        print "Not possible to remove %s" %(e) 
                        exit(1)
                print "Files successfully removed."
        
    def run(self,args):
        #1. Lane Mapping
        laneMappings = self.finder('%s/bs_mapping/' %args.directory_methylation, '*bam') 
        #2. Sample Mappings
        sampleMappings = self.finder('%s/bs_mapping_merged/' %args.directory_methylation, '*.bam')
        #3. Chromosome calls
        chrCalls = self.finder('%s/meth_calls_sample_chr/' %args.directory_methylation, '*.bcf')
        #4. Sample calls
        sampleCalls = self.finder('%s/meth_calls_sample/' %args.directory_methylation, '*.bcf')
        #5. Filter calls
        filterCalls =  self.finder('%s/meth_filtering/' %args.directory_methylation, '*_cpg.txt.gz') 
       
        if args.delete_all:
            print "Files to be removed:"
            self.reportFiles(laneMappings,"Lane Alignment Files:")
            self.reportFiles(sampleMappings,"Sample Alignment Files:")
            self.reportFiles(chrCalls,"Bisulfite Chromosome Variant Call Files:")
            self.reportFiles(sampleCalls,"Bisulfite Sample Variant Call Files:")
            self.reportFiles(filterCalls,"Filtered Sample Call Files:")
            self.removeFiles(laneMappings + sampleMappings + chrCalls + sampleCalls + filterCalls)

        else:
            if args.all_mappings:
                print "Alignment files to be removed:" 
                self.reportFiles(laneMappings,"Lane alignments:")
                self.reportFiles(sampleMappings,"Sample Alignments:")
                self.removeFiles(laneMappings + sampleMappings)
            else:
                if args.lane_mappings:
                    print "Alignment files to be removed:" 
                    self.reportFiles(laneMappings,"Lane alignments:")
                    self.removeFiles(laneMappings)

                if args.sample_mappings:
                    print "Alignment files to be removed:" 
                    self.reportFiles(sampleMappings,"Sample alignments:")
                    self.removeFiles(sampleMappings)
              
            if args.chr_calls:
                self.reportFiles(chrCalls,"Chromosome calls to be removed:")
                self.removeFiles(chrCalls)

            if args.sample_calls:
                self.reportFiles(sampleCalls,"Sample calls to be removed:")
                self.removeFiles(sampleCalls)

            if args.filter_calls:
                self.reportFiles(filterCalls,"Filter calls to be removed:")
                self.removeFiles(filterCalls)        


def cleanMethylationFiles():
    try:
        parser = argparse.ArgumentParser(prog="cleanMethylationFiles",
                description="clean Files generated by the methylation pipeline."
                )

        commands = {
            "check" : Check,            
            "remove" : Remove
        }
        instances = {}

        subparsers = parser.add_subparsers(title="commands", metavar="<command>", description="Available commands", dest="command")
        
        for name, cmdClass in commands.items():
            p = subparsers.add_parser(name, help=cmdClass.title, description=cmdClass.description)
            instances[name] = cmdClass()
            instances[name].register(p)

        args = parser.parse_args()
           
        try:
            instances[args.command].run(args)
        except TypeError, e:
            print 'Type error:', e
            exit(1)
        except NameError, e:
            print 'Name error:', e
            exit(1)
        except:
            sys.stderr.write("%s\n" % (str(sys.exc_info()[0])))
            exit(1)
    except KeyboardInterrupt:
        exit(1)
    finally:
        pass

if __name__ == "__main__":
    cleanMethylationFiles()

